(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{457:function(n,e,t){"use strict";t.r(e);var s=t(2),r=Object(s.a)({},(function(){var n=this,e=n._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h3",{attrs:{id:"一-共享配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一-共享配置"}},[n._v("#")]),n._v(" 一.共享配置")]),n._v(" "),e("h4",{attrs:{id:"_1-root"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-root"}},[n._v("#")]),n._v(" 1.root")]),n._v(" "),e("p",[n._v("类型： string")]),n._v(" "),e("p",[n._v("默认： process.cwd()")]),n._v(" "),e("p",[n._v("项目根目录（index.html 文件所在的位置）。可以是一个绝对路径，或者一个相对于该配置文件本身的相对路径。")]),n._v(" "),e("h4",{attrs:{id:"_2-base"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-base"}},[n._v("#")]),n._v(" 2.base")]),n._v(" "),e("p",[n._v("类型： string")]),n._v(" "),e("p",[n._v("默认： /")]),n._v(" "),e("p",[n._v("开发或生产环境服务的公共基础路径。合法的值包括以下几种：")]),n._v(" "),e("p",[n._v("绝对 URL 路径名，例如 /foo/\n完整的 URL，例如 https://foo.com/\n空字符串或 ./（用于开发环境）")]),n._v(" "),e("h4",{attrs:{id:"_3-plugins"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-plugins"}},[n._v("#")]),n._v(" 3.plugins")]),n._v(" "),e("p",[n._v("类型： (Plugin | Plugin[])[]")]),n._v(" "),e("p",[n._v("需要用到的插件数组。Falsy 虚值的插件将被忽略，插件数组将被扁平化（flatten）。")]),n._v(" "),e("h4",{attrs:{id:"_4-publicdir"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-publicdir"}},[n._v("#")]),n._v(" 4.publicDir")]),n._v(" "),e("p",[n._v("类型： string | false")]),n._v(" "),e("p",[n._v("默认： “public”")]),n._v(" "),e("p",[n._v("作为静态资源服务的文件夹。该目录中的文件在开发期间在 / 处提供，并在构建期间复制到 outDir 的根目录，并且始终按原样提供或复制而无需进行转换。该值可以是文件系统的绝对路径，也可以是相对于项目的根目录的相对路径。")]),n._v(" "),e("p",[n._v("将 publicDir 设定为 false 可以关闭此项功能。")]),n._v(" "),e("h4",{attrs:{id:"_5-resolve-alias"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-resolve-alias"}},[n._v("#")]),n._v(" 5.resolve.alias")]),n._v(" "),e("p",[n._v("类型：Record<string, string> | Array<{ find: string | RegExp, replacement: string }>")]),n._v(" "),e("p",[n._v("将会被传递到 @rollup/plugin-alias 作为 entries 的选项。也可以是一个对象，或一个 { find, replacement } 的数组。")]),n._v(" "),e("p",[n._v("当使用文件系统路径的别名时，请始终使用绝对路径。相对路径的别名值会原封不动地被使用，因此无法被正常解析。")]),n._v(" "),e("h3",{attrs:{id:"二-构建选项"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二-构建选项"}},[n._v("#")]),n._v(" 二.构建选项")]),n._v(" "),e("h4",{attrs:{id:"_1-build-rollupoptions"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-build-rollupoptions"}},[n._v("#")]),n._v(" 1.build.rollupOptions")]),n._v(" "),e("p",[n._v("类型： RollupOptions")]),n._v(" "),e("p",[n._v("自定义底层的 Rollup 打包配置。这与从 Rollup 配置文件导出的选项相同，并将与 Vite 的内部 Rollup 选项合并。")]),n._v(" "),e("h3",{attrs:{id:"三-vite-config-js配置示例"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三-vite-config-js配置示例"}},[n._v("#")]),n._v(" 三.vite.config.js配置示例")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("import { defineConfig, loadEnv } from 'vite';\n//defineConfig是一个工具函数，不用 jsdoc 注解也可以获取类型提示\n//加载环境变量（loadEnv）,loadEnv接收三个参数，第一个是.env后面的名字，第二个是绝对路径，第三个参数是你环境变量名的前缀，在vite中默认是VITE_。比如loadEnv(‘abc’, process.cwd(), 'ENV');\n\n//引入vite扩展插件\nconst { createVuePlugin } = require('vite-plugin-vue2');\nconst vitePluginHtmlConfig = require('vite-plugin-html-config');\nconst { viteExternalsPlugin } = require('vite-plugin-externals');\nimport path from 'path';\nimport cdnConfig from './cdn.config';\n\nconst resolve = (dir) => path.resolve(__dirname, dir);\n\nexport default defineConfig(({ command, mode }) => {\n  const envParams = loadEnv(mode, __dirname);//__dirname表示当前文件所处目录\n  return {\n    root: resolve('./src'), //  入口index.html，注意入口js应该与index.html 同一目录下（只能写到目录，不能写到具体文件）\n    base: './',\n    publicDir: resolve('static'),//静态资源文件夹\n    resolve: {\n      alias: {\n        '@': resolve('src'),//作为 entries 的选项\n      },\n      extensions: ['.mjs', '.js', '.ts', '.jsx', '.tsx', '.json', '.vue'],\n    },\n\n    // 反向代理\n    server: {\n      host: '0.0.0.0', //服务器ip地址\n      port: 5566, //本地端口\n      fs: {\n        strict: false, //  支持引用除入口目录的文件\n      },\n      // open: true, // 是否自动在浏览器打开\n      proxy: {\n        '/szapi': {\n          target: 'https://tradesz.test.api.qywgpo.com/',\n          changeOrigin: true,\n          rewrite: (path) => path.replace(/^\\/szapi/, ''),\n        },\n      },\n    },\n\n    plugins: [\n      createVuePlugin(),\n      //  打包babel编译\n      vitePluginHtmlConfig(cdnConfig.getCdnConfig()), //  使用cdn，传入分支参数判断使用哪种环境的js\n      viteExternalsPlugin(cdnConfig.externals), // 打包过滤被引入cdn的包\n    ],\n    build: {\n      //打包环境移除console.log，debugger\n      minify: 'terser',\n      terserOptions: {\n        compress: {\n          drop_console: true,\n          drop_debugger: true,\n        },\n      },\n      //打包文件按照类型分文件夹显示\n      rollupOptions: {\n        input: {\n          main: path.resolve(__dirname, 'src/index.html'),\n        },\n        output: {\n          chunkFileNames: 'js/[name]-[hash].js',\n          entryFileNames: 'js/[name]-[hash].js',\n          assetFileNames: '[ext]/[name]-[hash].[ext]',\n        },\n      },\n    },\n  };\n});\n")])])])])}),[],!1,null,null,null);e.default=r.exports}}]);