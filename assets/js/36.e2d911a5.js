(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{452:function(n,e,r){"use strict";r.r(e);var t=r(2),a=Object(t.a)({},(function(){var n=this,e=n._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h2",{attrs:{id:"_1-泛型的基本使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-泛型的基本使用"}},[n._v("#")]),n._v(" 1.泛型的基本使用")]),n._v(" "),e("ul",[e("li",[n._v("泛型可以理解为宽泛的类型，通常用于类和函数。使用的时候我们再指定类型")]),n._v(" "),e("li",[n._v("泛型不仅可以让我们的代码变得更加健壮, 还能让我们的代码在变得健壮的同时保持灵活性和可重用性")]),n._v(" "),e("li",[n._v("通过用 "),e("code",[n._v("<T>")]),n._v("来表示，放在参数的前面")])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('export default {}\n\n// 不使用泛型\n// let getArray = (value:number, items:number):number[]=>{\n//     return new Array(items).fill(value);\n// };\n// let arr = getArray(8, 3);\n// // let arr = getArray("abc", 3); // 报错\n// console.log(arr);\n\n\n// let getArray = (value:any, items:number):any[]=>{\n//     return new Array(items).fill(value);\n// };\n\n// let arr = getArray("刘亦菲", 10)\n// // let arr = getArray(10, 10)\n// console.log(arr);\n// let res = arr.map(item=>item.length); \n// console.log(res);\n\n\n\n// 使用泛型\nlet getArray = <T>(value:T, items:number):T[]=>{\n    return new Array(items).fill(value);\n};\n\nlet arr = getArray<string>("刘亦菲", 3)\n// let arr = getArray<number>(10, 3)\n\nlet res = arr.map(item => item.length);\nconsole.log(res);\n\n// 回顾\nconst techArr1: string[] = ["HTML", "CSS", "JS"];\nconst techArr2: Array<String> = ["VUE", "REACT", "ANGULAR"];\n')])])]),e("h2",{attrs:{id:"_2-泛型接口"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-泛型接口"}},[n._v("#")]),n._v(" 2.泛型接口")]),n._v(" "),e("ul",[e("li",[n._v("将泛型与接口结合起来使用，可以大大简化我们的代码，增加我们的代码可读性")]),n._v(" "),e("li",[n._v("泛型也可以使用默认值")])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('export default {}\n\n\n// interface IPerson {\n//   name: string\n//   sex: string\n// }\n\n// let p: IPerson = {\n//   name: "于文文",\n//   sex: "女"\n// }\n\n// interface IPerson<T1, T2> {\n//   name: T1\n//   sex: T2\n// }\n\n// let p: IPerson<String, number> = {\n//   name: "于文文",\n//   sex: 0\n// }\n\n\ninterface IPerson<T1=String, T2=number> {\n  name: T1\n  sex: T2\n}\n\nlet p: IPerson = {\n  name: "于文文",\n  sex: 0\n}\n')])])]),e("h2",{attrs:{id:"_3-泛型类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-泛型类"}},[n._v("#")]),n._v(" 3.泛型类")]),n._v(" "),e("ul",[e("li",[n._v("将泛型与接口结合起来使用，可以大大简化我们的代码，增加我们的代码可读性")]),n._v(" "),e("li",[n._v("泛型也可以使用默认值")])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('export default {}\n\nclass Person<T1, T2> {\n  name: T1\n  age: T2\n  sex: T1\n\n  constructor(name: T1, age: T2, sex: T1) {\n    this.name = name\n    this.age = age\n    this.sex = sex\n  }\n}\n\nconst p1 = new Person("刘诗诗", 18, "女")\nconst p2 = new Person<String, number>("虞书欣", 18, "女")\nconst p3:Person<String, number> = new Person("刘诗诗", 18, "女")\n')])])]),e("h2",{attrs:{id:"_4-使用类型参数进行约束"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-使用类型参数进行约束"}},[n._v("#")]),n._v(" 4.使用类型参数进行约束")]),n._v(" "),e("ul",[e("li",[n._v("一个泛型被另一个泛型约束, 就叫做泛型约束中使用类型参数")]),n._v(" "),e("li",[n._v("你可以声明一个类型参数，且它被另一个类型参数所约束。 比如，现在我们想要用属性名从对象里获取这个属性。并且我们想要确保这个属性存在于对象 obj上，因此我们需要在这两个类型之间使用约束")])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('export default {}\n\n// 在泛型约束中使用类型参数\n// 你可以声明一个类型参数，且它被另一个类型参数所约束。 比如，现在我们想要用属性名从对象里获取这个属性。\n// 并且我们想要确保这个属性存在于对象 obj上，因此我们需要在这两个类型之间使用约束\n\n// interface IkeyInterface {\n//   [key: string]: any\n// }\n\n// let getProps = (obj:IkeyInterface, key:string): any => {\n//   return obj[key]\n// } \n\n// let x ={ a: 1, b:2 };\n// let res = getProps(x, "a");\n// // let res = getProps(x, "c"); // 没报错\n// console.log(res);\n\n\nfunction getProperty<T, K extends keyof T>(obj: T, key: K) {\n  return obj[key];\n}\n\nlet x = { a: 1, b: 2};\ngetProperty(x, "a"); \n// getProperty(x, "c");  // 报错\n')])])])])}),[],!1,null,null,null);e.default=a.exports}}]);