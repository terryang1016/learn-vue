(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{429:function(a,t,s){"use strict";s.r(t);var r=s(2),n=Object(r.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h2",{attrs:{id:"数组常用方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数组常用方法"}},[a._v("#")]),a._v(" 数组常用方法")]),a._v(" "),t("h3",{attrs:{id:"_1-array-push"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-array-push"}},[a._v("#")]),a._v(" 1.Array.push()")]),a._v(" "),t("p",[a._v("向数组的末尾添加一个或多个元素，并返回新的数组长度。原数组改变。")]),a._v(" "),t("h3",{attrs:{id:"_2-array-pop"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-array-pop"}},[a._v("#")]),a._v(" 2.Array.pop()")]),a._v(" "),t("p",[a._v("删除并返回数组的最后一个元素，若该数组为空，则返回 undefined。原数组改变。")]),a._v(" "),t("h3",{attrs:{id:"_3-array-unshift"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-array-unshift"}},[a._v("#")]),a._v(" 3.Array.unshift()")]),a._v(" "),t("p",[a._v("向数组的开头添加一个或多个元素，并返回新的数组长度。原数组改变。")]),a._v(" "),t("h3",{attrs:{id:"_4-array-shift"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-array-shift"}},[a._v("#")]),a._v(" 4.Array.shift()")]),a._v(" "),t("p",[a._v("删除数组的第一项，并返回第一个元素的值。若该数组为空，则返回 undefined。原数组改变。")]),a._v(" "),t("h3",{attrs:{id:"_5-array-concat-arr1-arr2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-array-concat-arr1-arr2"}},[a._v("#")]),a._v(" 5.Array.concat(arr1,arr2…)")]),a._v(" "),t("p",[a._v("合并两个或多个数组，生成一个新的数组。原数组不变。")]),a._v(" "),t("h3",{attrs:{id:"_6-array-join"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-array-join"}},[a._v("#")]),a._v(" 6.Array.join()")]),a._v(" "),t("p",[a._v("将数组的每一项用指定字符连接形成一个字符串。默认连接字符为 “,” 逗号。")]),a._v(" "),t("h3",{attrs:{id:"_7-array-reverse"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-array-reverse"}},[a._v("#")]),a._v(" 7.Array.reverse()")]),a._v(" "),t("p",[a._v("将数组倒序。原数组改变。")]),a._v(" "),t("h3",{attrs:{id:"_8-array-sort"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-array-sort"}},[a._v("#")]),a._v(" 8.Array.sort()")]),a._v(" "),t("p",[a._v("对数组元素进行排序。按照字符串 UniCode 码排序，原数组改变。")]),a._v(" "),t("p",[a._v("① 从小到大a-b")]),a._v(" "),t("p",[a._v("② 从大到小b-a")]),a._v(" "),t("p",[a._v("③ 按照数组对象中的某个值进行排序")]),a._v(" "),t("h3",{attrs:{id:"_9-array-map-function"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9-array-map-function"}},[a._v("#")]),a._v(" 9.Array.map(function)")]),a._v(" "),t("p",[a._v("原数组的每一项执行函数后，返回一个新的数组。原数组不变。（注意该方法和 forEach 的区别）。")]),a._v(" "),t("h3",{attrs:{id:"_10-array-slice"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_10-array-slice"}},[a._v("#")]),a._v(" 10.Array.slice()")]),a._v(" "),t("p",[a._v("按照条件查找出其中的部分内容")]),a._v(" "),t("p",[a._v("参数：")]),a._v(" "),t("p",[a._v("array.slice(n, m)，从索引 n 开始查找到 m 处（不包含 m）")]),a._v(" "),t("p",[a._v("array.slice(n) 第二个参数省略，则一直查找到末尾")]),a._v(" "),t("p",[a._v("array.slice(0)原样输出内容，可以实现数组克隆")]),a._v(" "),t("p",[a._v("array.slice(-n,-m) slice 支持负参数，从最后一项开始算起，-1 为最后一项，-2 为倒数第二项")]),a._v(" "),t("p",[a._v("返回值：返回一个新数组")]),a._v(" "),t("p",[a._v("是否改变原数组：不改变")]),a._v(" "),t("h3",{attrs:{id:"_11-array-splice-index-howmany-arr1-arr2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_11-array-splice-index-howmany-arr1-arr2"}},[a._v("#")]),a._v(" 11.Array.splice(index,howmany,arr1,arr2…)")]),a._v(" "),t("p",[a._v("用于添加或删除数组中的元素。从 index 位置开始删除 howmany 个元素，并将 arr1、arr2…数据从 index 位置依次插入。howmany 为 0 时，则不删除元素。\n原数组改变。")]),a._v(" "),t("h3",{attrs:{id:"_12-array-foreach-function"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_12-array-foreach-function"}},[a._v("#")]),a._v(" 12.Array.forEach(function)")]),a._v(" "),t("p",[a._v("用于调用数组的每个元素，并将元素传递给回调函数。原数组不变。（注意该方法和 map 的区别，若直接打印 Array.forEach，结果为 undefined）。")]),a._v(" "),t("h3",{attrs:{id:"_13-array-filter-function"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_13-array-filter-function"}},[a._v("#")]),a._v(" 13.Array.filter(function)")]),a._v(" "),t("p",[a._v("过滤数组中，符合条件的元素并返回一个新的数组。")]),a._v(" "),t("h3",{attrs:{id:"_14-array-every-function"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_14-array-every-function"}},[a._v("#")]),a._v(" 14.Array.every(function)")]),a._v(" "),t("p",[a._v("对数组中的每一项进行判断，若都符合则返回 true，否则返回 false。")]),a._v(" "),t("h3",{attrs:{id:"_15-array-some-function"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_15-array-some-function"}},[a._v("#")]),a._v(" 15.Array.some(function)")]),a._v(" "),t("p",[a._v("对数组中的每一项进行判断，若都不符合则返回 false，否则返回 true。")]),a._v(" "),t("h3",{attrs:{id:"_16-array-reduce-function"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_16-array-reduce-function"}},[a._v("#")]),a._v(" 16.Array.reduce(function)")]),a._v(" "),t("p",[a._v("reduce() 方法接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值。")]),a._v(" "),t("h3",{attrs:{id:"_17-indexof"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_17-indexof"}},[a._v("#")]),a._v(" 17.indexOf()")]),a._v(" "),t("p",[a._v("检测当前值在数组中第一次出现的位置索引")]),a._v(" "),t("p",[a._v("参数：array.indexOf(item,start) item:查找的元素 start:字符串中开始检索的位置。")]),a._v(" "),t("p",[a._v("返回值：第一次查到的索引，未找到返回-1。")]),a._v(" "),t("p",[a._v("是否改变原数组：不改变。")]),a._v(" "),t("h3",{attrs:{id:"_18-includes"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_18-includes"}},[a._v("#")]),a._v(" 18.includes()")]),a._v(" "),t("p",[a._v("判断一个数组是否包含一个指定的值")]),a._v(" "),t("p",[a._v("参数：指定的内容")]),a._v(" "),t("p",[a._v("返回值：布尔值")]),a._v(" "),t("p",[a._v("是否改变原数组：不改变。")]),a._v(" "),t("h3",{attrs:{id:"_19-reduce"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_19-reduce"}},[a._v("#")]),a._v(" 19.reduce()")]),a._v(" "),t("h4",{attrs:{id:"定义-reduce-方法接收一个函数作为累加器-数组中的每个值-从左到右-开始缩减-最终计算为一个值。"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#定义-reduce-方法接收一个函数作为累加器-数组中的每个值-从左到右-开始缩减-最终计算为一个值。"}},[a._v("#")]),a._v(" 定义：reduce() 方法接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值。")]),a._v(" "),t("p",[a._v("语法：arr.reduce(function(prev,cur,index,arr){undefined\n一系列操作\n}, init);\nprev： 必需(初始值, 或者计算结束后的返回值)；\ncur： 必需(当前元素)；\nindex： 可选(当前元素的索引)；\narr：可选(当前元素所属的数组对象)；\ninit： 可选(传递给函数的初始值)；")]),a._v(" "),t("h4",{attrs:{id:"使用场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用场景"}},[a._v("#")]),a._v(" 使用场景")]),a._v(" "),t("ul",[t("li",[t("h5",{attrs:{id:"场景一-数组累加、累乘"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#场景一-数组累加、累乘"}},[a._v("#")]),a._v(" 场景一：数组累加、累乘")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let arr1 = [1,2,3,4,5]\nconsole.log(arr1.reduce((x,y)=>x+y));// 15\nconsole.log(arr1.reduce((x,y)=>x*y));// 120\n")])])])]),a._v(" "),t("li",[t("h5",{attrs:{id:"场景二-计算数组中每个元素出现的次数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#场景二-计算数组中每个元素出现的次数"}},[a._v("#")]),a._v(" 场景二：计算数组中每个元素出现的次数")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let arr2 = ['a','b','c','d','a','b','c','a','b','a']\nlet num = arr2.reduce((prev,cur)=>{\n    if(cur in prev){//如果prev(初始对象)包含cur(当前元素),数量累加\n        prev[cur]++\n    }else{\n        prev[cur] = 1\n    }\n    return prev\n},{});//初始值需要设置一个空的对象\nconsole.log(num);// {a: 4, b: 3, c: 2, d: 1}\n")])])])]),a._v(" "),t("li",[t("h5",{attrs:{id:"场景三-数组去重"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#场景三-数组去重"}},[a._v("#")]),a._v(" 场景三：数组去重")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let arr3 = [1,2,3,4,3,2,1,2,3,1]\nlet remo = arr3.reduce((prev,cur)=>{\n    if(prev.indexOf(cur)==-1){//如果prev没找到cur\n        return prev.concat(cur)\n    }else{\n        return prev\n    }\n    // if(!prev.includes(cur)){//如果prev不包含cur\n    //     return prev.concat(cur)\n    // }else{\n    //     return prev\n    // }\n},[]);// 初始值设置一个空数组\nconsole.log(remo);// [1,2,3,4]\n")])])])]),a._v(" "),t("li",[t("h5",{attrs:{id:"场景四-将二维数组转化为一维数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#场景四-将二维数组转化为一维数组"}},[a._v("#")]),a._v(" 场景四：将二维数组转化为一维数组")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let arr4 = [[0, 1], [2, 3], [4, 5]]\nlet newArr1 = arr4.reduce((prev,cur)=>{\n     return prev.concat(cur)\n },[])\n console.log(newArr1); // [0, 1, 2, 3, 4, 5]\n")])])])]),a._v(" "),t("li",[t("h5",{attrs:{id:"场景五-将多维数组转化为一维数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#场景五-将多维数组转化为一维数组"}},[a._v("#")]),a._v(" 场景五：将多维数组转化为一维数组")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let arr5 = [[0, 1], [2, 3], [4,[5,6,7,8]]]\nfunction newArr(arr5){\n    return arr5.reduce((prev,cur)=>prev.concat(Array.isArray(cur)?newArr(cur):cur),[])\n}\nconsole.log(newArr(arr5)); //[0, 1, 2, 3, 4, 5, 6, 7, 8]\n")])])])]),a._v(" "),t("li",[t("h5",{attrs:{id:"场景六-累加对象数组中的值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#场景六-累加对象数组中的值"}},[a._v("#")]),a._v(" 场景六：累加对象数组中的值")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let arr6 = [{a: 1}, {a:2}, {a:3}]\nlet sum = arr6.reduce( (prev, cur) => prev + cur.a ,0);\nconsole.log(sum); // 6\n")])])])]),a._v(" "),t("li",[t("h5",{attrs:{id:"场景七-求数组中最大的值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#场景七-求数组中最大的值"}},[a._v("#")]),a._v(" 场景七：求数组中最大的值")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let arr7 = [1,5,9,4,3,7,12]\nlet maxNum = arr7.reduce((prev,cur)=>{\n    return Math.max(prev,cur);// Math.max方法可以求出给定参数中最大的数,Math.min方法可以求出给定参数中最小的数\n})\nconsole.log(maxNum);// 12\n\n")])])])])]),a._v(" "),t("h2",{attrs:{id:"es6新增方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#es6新增方法"}},[a._v("#")]),a._v(" ES6新增方法")]),a._v(" "),t("h3",{attrs:{id:"_20-array-from"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_20-array-from"}},[a._v("#")]),a._v(" 20.Array.from()")]),a._v(" "),t("p",[t("code",[a._v("Array.from()")]),a._v("方法用于将两类对象转为真正的数组："),t("strong",[a._v("类似数组的对象")]),a._v("（array-like object）和"),t("strong",[a._v("可遍历（iterable）的对象")]),a._v("（包括 ES6 新增的数据结构 Set 和 Map）。")]),a._v(" "),t("div",{staticClass:"language-javascript extra-class"},[t("pre",{pre:!0,attrs:{class:"language-javascript"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("let")]),a._v(" arrayLike "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token string-property property"}},[a._v("'0'")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'a'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token string-property property"}},[a._v("'1'")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'b'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token string-property property"}},[a._v("'2'")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'c'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[a._v("length")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// ES5 的写法")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" arr1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("slice")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("call")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("arrayLike"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// ['a', 'b', 'c']")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// ES6 的写法")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("let")]),a._v(" arr2 "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" Array"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("from")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("arrayLike"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// ['a', 'b', 'c']")]),a._v("\n")])])]),t("div",{staticClass:"language-javascript extra-class"},[t("pre",{pre:!0,attrs:{class:"language-javascript"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// NodeList 对象")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("let")]),a._v(" ps "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" document"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("querySelectorAll")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'p'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\nArray"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("from")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("ps"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("filter")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[a._v("p")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=>")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" p"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("textContent"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("length "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("100")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// arguments 对象")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("function")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("foo")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" args "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" Array"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("from")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("arguments"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// ...")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),t("h3",{attrs:{id:"_21-flat-flatmap"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_21-flat-flatmap"}},[a._v("#")]),a._v(" 21.flat()，flatMap()")]),a._v(" "),t("p",[a._v("数组的成员有时还是数组，"),t("code",[a._v("Array.prototype.flat()")]),a._v("用于将嵌套的数组“拉平”，变成一维的数组。该方法返回一个新数组，对原数据没有影响。")]),a._v(" "),t("div",{staticClass:"language-javascript extra-class"},[t("pre",{pre:!0,attrs:{class:"language-javascript"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("flat")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// [1, 2, 3, 4]")]),a._v("\n")])])]),t("p",[a._v("上面代码中，原数组的成员里面有一个数组，"),t("code",[a._v("flat()")]),a._v("方法将子数组的成员取出来，添加在原来的位置。")]),a._v(" "),t("p",[t("code",[a._v("flat()")]),a._v("默认只会“拉平”一层，"),t("strong",[a._v("如果想要“拉平”多层的嵌套数组，可以将"),t("code",[a._v("flat()")]),a._v("方法的参数写成一个整数")]),a._v("，表示想要拉平的层数，默认为1。")]),a._v(" "),t("div",{staticClass:"language-javascript extra-class"},[t("pre",{pre:!0,attrs:{class:"language-javascript"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("flat")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// [1, 2, 3, [4, 5]]")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("flat")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// [1, 2, 3, 4, 5]")]),a._v("\n")])])]),t("p",[a._v("上面代码中，"),t("code",[a._v("flat()")]),a._v("的参数为2，表示要“拉平”两层的嵌套数组。")]),a._v(" "),t("p",[a._v("如果"),t("strong",[a._v("不管有多少层嵌套，都要转成一维数组，可以用"),t("code",[a._v("Infinity")]),a._v("关键字作为参数")]),a._v("。")]),a._v(" "),t("div",{staticClass:"language-javascript extra-class"},[t("pre",{pre:!0,attrs:{class:"language-javascript"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("flat")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("Infinity")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// [1, 2, 3]")]),a._v("\n")])])]),t("p",[a._v("如果"),t("strong",[a._v("原数组有空位，"),t("code",[a._v("flat()")]),a._v("方法会跳过空位。")])]),a._v(" "),t("div",{staticClass:"language-javascript extra-class"},[t("pre",{pre:!0,attrs:{class:"language-javascript"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("flat")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// [1, 2, 4, 5]")]),a._v("\n")])])]),t("p",[t("code",[a._v("flatMap()")]),a._v("方法对原数组的每个成员执行一个函数（相当于执行"),t("code",[a._v("Array.prototype.map()")]),a._v("），然后对返回值组成的数组执行"),t("code",[a._v("flat()")]),a._v("方法。该方法返回一个新数组，不改变原数组。")]),a._v(" "),t("div",{staticClass:"language-javascript extra-class"},[t("pre",{pre:!0,attrs:{class:"language-javascript"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 相当于 [[2, 4], [3, 6], [4, 8]].flat()")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("flatMap")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[a._v("x")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=>")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" x "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// [2, 4, 3, 6, 4, 8]")]),a._v("\n")])])]),t("p",[t("strong",[t("code",[a._v("flatMap()")]),a._v("只能展开一层数组")]),a._v("。")]),a._v(" "),t("div",{staticClass:"language-javascript extra-class"},[t("pre",{pre:!0,attrs:{class:"language-javascript"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 相当于 [[[2]], [[4]], [[6]], [[8]]].flat()")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("flatMap")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[a._v("x")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=>")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("x "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// [[2], [4], [6], [8]]")]),a._v("\n")])])]),t("p",[a._v("上面代码中，遍历函数返回的是一个双层的数组，但是默认只能展开一层，因此"),t("code",[a._v("flatMap()")]),a._v("返回的还是一个嵌套数组。")]),a._v(" "),t("p",[t("code",[a._v("flatMap()")]),a._v("方法的参数是一个遍历函数，该函数可以接受三个参数，分别是当前数组成员、当前数组成员的位置（从零开始）、原数组。")]),a._v(" "),t("div",{staticClass:"language-javascript extra-class"},[t("pre",{pre:!0,attrs:{class:"language-javascript"}},[t("code",[a._v("arr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("flatMap")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("function")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("callback")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[a._v("currentValue"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" index"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" array"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// ...")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" thisArg"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),t("p",[t("code",[a._v("flatMap()")]),a._v("方法还可以有第二个参数，用来绑定遍历函数里面的"),t("code",[a._v("this")]),a._v("。")]),a._v(" "),t("p",[t("strong",[a._v("原数组改变的方法有：push pop shift unshift reverse sort splice")]),a._v(" "),t("strong",[a._v("不改变原数组的方法有：concat map filter join every some indexOf slice forEach flat flatMap")])])])}),[],!1,null,null,null);t.default=n.exports}}]);