(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{461:function(e,t,a){"use strict";a.r(t);var r=a(2),n=Object(r.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"一-起步"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一-起步"}},[e._v("#")]),e._v(" 一.起步")]),e._v(" "),t("h2",{attrs:{id:"_1-创建场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-创建场景"}},[e._v("#")]),e._v(" 1.创建场景")]),e._v(" "),t("p",[e._v("为了真正能够让你的场景借助three.js来进行显示，我们需要以下几个对象："),t("strong",[e._v("场景、相机和渲染器")]),e._v("，这样我们就能透过摄像机渲染出场景。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('import * as THREE from "three";\n\n// console.log(THREE);\n\n// 目标：了解three.js最基本的内容\n\n// 1、创建场景\nconst scene = new THREE.Scene();\n\n// 2、创建相机\nconst camera = new THREE.PerspectiveCamera(\n  75,\n  window.innerWidth / window.innerHeight,\n  0.1,\n  1000\n);\n\n// 设置相机位置\ncamera.position.set(0, 0, 10);\nscene.add(camera);\n\n// 添加物体\n// 创建几何体\nconst cubeGeometry = new THREE.BoxGeometry(1, 1, 1);\nconst cubeMaterial = new THREE.MeshBasicMaterial({ color: 0xffff00 });\n// 根据几何体和材质创建物体\nconst cube = new THREE.Mesh(cubeGeometry, cubeMaterial);\n// 将几何体添加到场景中\nscene.add(cube);\n\n// 初始化渲染器\nconst renderer = new THREE.WebGLRenderer();\n// 设置渲染的尺寸大小\nrenderer.setSize(window.innerWidth, window.innerHeight);\n// console.log(renderer);\n// 将webgl渲染的canvas内容添加到body\ndocument.body.appendChild(renderer.domElement);\n\n// 使用渲染器，通过相机将场景渲染进来\nrenderer.render(scene, camera);\n')])])]),t("p",[e._v("three.js里有几种不同的相机，在这里，我们使用的是"),t("strong",[e._v("PerspectiveCamera")]),e._v("（透视摄像机）。")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",{staticStyle:{"text-align":"center"}},[e._v("参数名")]),e._v(" "),t("th",{staticStyle:{"text-align":"center"}},[e._v("描述")]),e._v(" "),t("th",{staticStyle:{"text-align":"center"}},[e._v("作用")])])]),e._v(" "),t("tbody",[t("tr",[t("td",{staticStyle:{"text-align":"center"}},[t("strong",[e._v("FOV")])]),e._v(" "),t("td",{staticStyle:{"text-align":"center"}},[t("strong",[e._v("视野角度")])]),e._v(" "),t("td",{staticStyle:{"text-align":"center"}},[e._v("视野角度就是无论在什么时候，你所能在显示器上看到的场景的范围，它的单位是角度(与弧度区分开)。")])]),e._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"center"}},[t("strong",[e._v("aspect ratio")])]),e._v(" "),t("td",{staticStyle:{"text-align":"center"}},[t("strong",[e._v("长宽比")])]),e._v(" "),t("td",{staticStyle:{"text-align":"center"}},[e._v("一个物体的宽除以它的高的值")])]),e._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"center"}},[e._v("near和far")]),e._v(" "),t("td",{staticStyle:{"text-align":"center"}},[t("strong",[e._v("近截面")]),e._v("（near）和"),t("strong",[e._v("远截面")]),e._v("（far）")]),e._v(" "),t("td",{staticStyle:{"text-align":"center"}},[e._v("当物体某些部分比摄像机的"),t("strong",[e._v("远截面")]),e._v("远或者比"),t("strong",[e._v("近截面")]),e._v("近的时候，该这些部分将不会被渲染到场景中")])])])]),e._v(" "),t("h2",{attrs:{id:"_2-画线"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-画线"}},[e._v("#")]),e._v(" 2.画线")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const renderer = new THREE.WebGLRenderer();\nrenderer.setSize( window.innerWidth, window.innerHeight );\ndocument.body.appendChild( renderer.domElement );\n\nconst camera = new THREE.PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 1, 500 );\ncamera.position.set( 0, 0, 100 );\ncamera.lookAt( 0, 0, 0 );\n\nconst scene = new THREE.Scene();\n")])])]),t("ul",[t("li",[t("p",[e._v("定义材质")]),e._v(" "),t("p",[e._v("对于线条来说，我们能使用的材质只有LineBasicMaterial 或者 LineDashedMaterial。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("//create a blue LineBasicMaterial\nconst material = new THREE.LineBasicMaterial( { color: 0x0000ff } );\n")])])])]),e._v(" "),t("li",[t("p",[e._v("定义带顶点的geometry（几何体）")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const points = [];\npoints.push( new THREE.Vector3( - 10, 0, 0 ) );\npoints.push( new THREE.Vector3( 0, 10, 0 ) );\npoints.push( new THREE.Vector3( 10, 0, 0 ) );\n\nconst geometry = new THREE.BufferGeometry().setFromPoints( points );\n")])])])]),e._v(" "),t("li",[t("p",[e._v("将材质和点组合在一起，形成一条线")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const line = new THREE.Line( geometry, material );\n")])])])]),e._v(" "),t("li",[t("p",[e._v("添加到场景中，并调用render（渲染）函数")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("scene.add( line );\nrenderer.render( scene, camera );\n")])])])])]),e._v(" "),t("h2",{attrs:{id:"_3-创建文字"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-创建文字"}},[e._v("#")]),e._v(" 3.创建文字")]),e._v(" "),t("h3",{attrs:{id:"_1-dom-css"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-dom-css"}},[e._v("#")]),e._v(" 1. DOM + CSS")]),e._v(" "),t("p",[e._v("使用HTML通常是最简单、最快速的添加文本的方法，这是大多数的Three.js示例中用于添加描述性叠加文字的方法。")]),e._v(" "),t("p",[e._v("你可以在这里添加内容")]),e._v(" "),t("div",{attrs:{id:"info"}},[e._v("Description")]),e._v(" "),t("p",[e._v("然后使用CSS来将其绝对定位在其它具有z-index的元素之上，尤其是当你全屏运行three.js的时候。")]),e._v(" "),t("p",[t("code",[e._v("#info { position: absolute; top: 10px; width: 100%; text-align: center; z-index: 100; display:block; }")])]),e._v(" "),t("h3",{attrs:{id:"_2-将文字绘制到画布中-并将其用作texture-纹理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-将文字绘制到画布中-并将其用作texture-纹理"}},[e._v("#")]),e._v(" 2. 将文字绘制到画布中，并将其用作Texture（纹理）")]),e._v(" "),t("p",[e._v("如果你希望在three.js的场景中的平面上轻松地绘制文本，请使用此方法。")]),e._v(" "),t("h3",{attrs:{id:"_3-在你所喜欢的3d软件里创建模型-并导出给three-js"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-在你所喜欢的3d软件里创建模型-并导出给three-js"}},[e._v("#")]),e._v(" 3. 在你所喜欢的3D软件里创建模型，并导出给three.js")]),e._v(" "),t("p",[e._v("如果你更喜欢使用3D建模软件来工作并导出模型到three.js，请使用这种方法。")]),e._v(" "),t("h3",{attrs:{id:"_4-three-js自带的文字几何体"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-three-js自带的文字几何体"}},[e._v("#")]),e._v(" 4. three.js自带的文字几何体")]),e._v(" "),t("p",[e._v("如果你更喜欢使用纯three.js来工作，或者创建能够由程序改变的、动态的3D文字，你可以创建一个其几何体为THREE.TextGeometry的实例的网格：")]),e._v(" "),t("p",[t("code",[e._v("new THREE.TextGeometry( text, parameters );")])]),e._v(" "),t("p",[e._v("然而，为了使得它能够工作，你的TextGeometry需要在其“font”参数上设置一个THREE.Font的实例。\n请参阅 TextGeometry 页面来阅读如何完成此操作的详细信息，以及每一个接收的参数的描述，还有由three.js分发、自带的JSON字体的列表。")]),e._v(" "),t("h2",{attrs:{id:"_4-载入3d模型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-载入3d模型"}},[e._v("#")]),e._v(" 4.载入3D模型")]),e._v(" "),t("p",[e._v("在three.js中只会内置一部分加载器（例如：ObjectLoader） —— 其它的需要在你的应用中单独引入。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("import { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';\n")])])]),t("p",[e._v("一旦你引入了一个加载器，你就已经准备好为场景添加模型了。不同加载器之间可能具有不同的语法 —— 当使用其它格式的时候请参阅该格式加载器的示例以及文档。对于glTF，使用全局script的用法类似：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const loader = new GLTFLoader(); loader.load( 'path/to/model.glb', function ( gltf ) { \tscene.add( gltf.scene ); }, undefined, function ( error ) { \tconsole.error( error ); } );\n")])])]),t("h2",{attrs:{id:"二-进阶"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二-进阶"}},[e._v("#")]),e._v(" 二.进阶")]),e._v(" "),t("h2",{attrs:{id:"_1-更新场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-更新场景"}},[e._v("#")]),e._v(" 1.更新场景")]),e._v(" "),t("h2",{attrs:{id:"_2-废置对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-废置对象"}},[e._v("#")]),e._v(" 2.废置对象")]),e._v(" "),t("h2",{attrs:{id:"_3-创建vr内容"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-创建vr内容"}},[e._v("#")]),e._v(" 3.创建VR内容")]),e._v(" "),t("h2",{attrs:{id:"_4-使用后期除了"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-使用后期除了"}},[e._v("#")]),e._v(" 4.使用后期除了")]),e._v(" "),t("h2",{attrs:{id:"_5-矩阵变换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-矩阵变换"}},[e._v("#")]),e._v(" 5.矩阵变换")]),e._v(" "),t("h2",{attrs:{id:"_6-动画系统"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-动画系统"}},[e._v("#")]),e._v(" 6.动画系统")])])}),[],!1,null,null,null);t.default=n.exports}}]);