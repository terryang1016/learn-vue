(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{440:function(n,e,t){"use strict";t.r(e);var a=t(2),s=Object(a.a)({},(function(){var n=this,e=n._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h2",{attrs:{id:"_1-component构造器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-component构造器"}},[n._v("#")]),n._v(" 1.Component构造器")]),n._v(" "),e("p",[e("code",[n._v("Component")]),n._v(" 构造器可用于定义组件，调用 "),e("code",[n._v("Component")]),n._v(" 构造器时可以指定组件的属性、数据、方法等。")]),n._v(" "),e("p",[n._v("详细的参数含义和使用请参考 "),e("a",{attrs:{href:"https://developers.weixin.qq.com/miniprogram/dev/api/xr-frame/classes/Component.html",target:"_blank",rel:"noopener noreferrer"}},[n._v("Component 参考文档"),e("OutboundLink")],1),n._v("。")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("Component({\n\n  behaviors: [],\n\n  properties: {\n    myProperty: { // 属性名\n      type: String,\n      value: ''\n    },\n    myProperty2: String // 简化的定义方式\n  },\n  \n  data: {}, // 私有数据，可用于模板渲染\n\n  lifetimes: {\n    // 生命周期函数，可以为函数，或一个在methods段中定义的方法名\n    attached: function () { },\n    moved: function () { },\n    detached: function () { },\n  },\n\n  // 生命周期函数，可以为函数，或一个在methods段中定义的方法名\n  attached: function () { }, // 此处attached的声明会被lifetimes字段中的声明覆盖\n  ready: function() { },\n\n  pageLifetimes: {\n    // 组件所在页面的生命周期函数\n    show: function () { },\n    hide: function () { },\n    resize: function () { },\n  },\n\n  methods: {\n    onMyButtonTap: function(){\n      this.setData({\n        // 更新属性和数据的方法与更新页面数据的方法类似\n      })\n    },\n    // 内部方法建议以下划线开头\n    _myPrivateMethod: function(){\n      // 这里将 data.A[0].B 设为 'myPrivateData'\n      this.setData({\n        'A[0].B': 'myPrivateData'\n      })\n    },\n    _propertyChange: function(newVal, oldVal) {\n\n    }\n  }\n\n})\n")])])]),e("h2",{attrs:{id:"_2-behaviors"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-behaviors"}},[n._v("#")]),n._v(" 2.behaviors")]),n._v(" "),e("p",[e("code",[n._v("behaviors")]),n._v(" 是用于组件间代码共享的特性，类似于一些编程语言中的 “mixins” 或 “traits”。")]),n._v(" "),e("p",[n._v("每个 "),e("code",[n._v("behavior")]),n._v(" 可以包含一组属性、数据、生命周期函数和方法。"),e("strong",[n._v("组件引用它时，它的属性、数据和方法会被合并到组件中，生命周期函数也会在对应时机被调用。")]),n._v(" 每个组件可以引用多个 "),e("code",[n._v("behavior")]),n._v(" ，"),e("code",[n._v("behavior")]),n._v(" 也可以引用其它 "),e("code",[n._v("behavior")]),n._v(" 。")]),n._v(" "),e("p",[n._v("详细的参数含义和使用请参考 "),e("a",{attrs:{href:"https://developers.weixin.qq.com/miniprogram/dev/reference/api/Behavior.html",target:"_blank",rel:"noopener noreferrer"}},[n._v("Behavior 参考文档"),e("OutboundLink")],1),n._v("。")]),n._v(" "),e("h2",{attrs:{id:"组件中使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#组件中使用"}},[n._v("#")]),n._v(" 组件中使用")]),n._v(" "),e("p",[n._v("组件引用时，在 "),e("code",[n._v("behaviors")]),n._v(" 定义段中将它们逐个列出即可。")]),n._v(" "),e("p",[e("strong",[n._v("代码示例：")])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("// my-component.js\nvar myBehavior = require('my-behavior')\nComponent({\n  behaviors: [myBehavior],\n  properties: {\n    myProperty: {\n      type: String\n    }\n  },\n  data: {\n    myData: 'my-component-data'\n  },\n  created: function () {\n    console.log('[my-component] created')\n  },\n  attached: function () { \n    console.log('[my-component] attached')\n  },\n  ready: function () {\n    console.log('[my-component] ready')\n  },\n  methods: {\n    myMethod: function () {\n      console.log('[my-component] log by myMethod')\n    },\n  }\n})\n")])])]),e("h2",{attrs:{id:"_3-数据监听器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-数据监听器"}},[n._v("#")]),n._v(" 3.数据监听器")]),n._v(" "),e("h4",{attrs:{id:"_1数据监听器-类型vue中的watch"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1数据监听器-类型vue中的watch"}},[n._v("#")]),n._v(" ①数据监听器（类型vue中的watch）")]),n._v(" "),e("p",[n._v("数据监听器可以用于监听和响应任何属性和数据字段的变化。从小程序基础库版本 "),e("a",{attrs:{href:"https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html",target:"_blank",rel:"noopener noreferrer"}},[n._v("2.6.1"),e("OutboundLink")],1),n._v(" 开始支持。")]),n._v(" "),e("h4",{attrs:{id:"_2使用数据监听器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2使用数据监听器"}},[n._v("#")]),n._v(" ②使用数据监听器")]),n._v(" "),e("p",[n._v("有时，在一些数据字段被 setData 设置时，需要执行一些操作。")]),n._v(" "),e("p",[n._v("例如， "),e("code",[n._v("this.data.sum")]),n._v(" 永远是 "),e("code",[n._v("this.data.numberA")]),n._v(" 与 "),e("code",[n._v("this.data.numberB")]),n._v(" 的和。此时，可以使用数据监听器进行如下实现。")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("Component({\n  attached: function() {\n    this.setData({\n      numberA: 1,\n      numberB: 2,\n    })\n  },\n  observers: {\n    'numberA, numberB': function(numberA, numberB) {\n      // 在 numberA 或者 numberB 被设置时，执行这个函数\n      this.setData({\n        sum: numberA + numberB\n      })\n    }\n  }\n})\n")])])]),e("p",[n._v("③监听字段语法")]),n._v(" "),e("p",[n._v("数据监听器支持"),e("strong",[n._v("监听属性或内部数据的变化")]),n._v("，可以"),e("strong",[n._v("同时监听多个")]),n._v("。一次 setData 最多触发每个监听器一次。")]),n._v(" "),e("p",[n._v("同时，监听器可以监听子数据字段，如下例所示。")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("Component({\n  observers: {\n    'some.subfield': function(subfield) {\n      // 使用 setData 设置 this.data.some.subfield 时触发\n      // （除此以外，使用 setData 设置 this.data.some 也会触发）\n      subfield === this.data.some.subfield\n    },\n    'arr[12]': function(arr12) {\n      // 使用 setData 设置 this.data.arr[12] 时触发\n      // （除此以外，使用 setData 设置 this.data.arr 也会触发）\n      arr12 === this.data.arr[12]\n    },\n  }\n})\n")])])]),e("p",[n._v("如果需要监听所有子数据字段的变化，可以使用通配符 "),e("code",[n._v("**")]),n._v(" 。")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("Component({\n  observers: {\n    'some.field.**': function(field) {\n      // 使用 setData 设置 this.data.some.field 本身或其下任何子数据字段时触发\n      // （除此以外，使用 setData 设置 this.data.some 也会触发）\n      field === this.data.some.field\n    },\n  },\n  attached: function() {\n    // 这样会触发上面的 observer\n    this.setData({\n      'some.field': { /* ... */ }\n    })\n    // 这样也会触发上面的 observer\n    this.setData({\n      'some.field.xxx': { /* ... */ }\n    })\n    // 这样还是会触发上面的 observer\n    this.setData({\n      'some': { /* ... */ }\n    })\n  }\n})\n")])])]),e("p",[n._v("特别地，仅使用通配符 "),e("code",[n._v("**")]),n._v(" 可以监听全部 setData 。")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("Component({\n  observers: {\n    '**': function() {\n      // 每次 setData 都触发\n    },\n  },\n})\n")])])]),e("p",[n._v("④注意事项")]),n._v(" "),e("ul",[e("li",[n._v("数据监听器监听的是 setData 涉及到的数据字段，即使这些数据字段的值没有发生变化，数据监听器依然会被触发。")]),n._v(" "),e("li",[n._v("如果在数据监听器函数中使用 setData 设置本身监听的数据字段，可能会导致死循环，需要特别留意。")]),n._v(" "),e("li",[n._v("数据监听器和属性的 observer 相比，数据监听器更强大且通常具有更好的性能。")])])])}),[],!1,null,null,null);e.default=s.exports}}]);