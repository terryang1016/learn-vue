(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{454:function(n,e,t){"use strict";t.r(e);var a=t(2),r=Object(a.a)({},(function(){var n=this,e=n._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h2",{attrs:{id:"_1-可选属性与只读属性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-可选属性与只读属性"}},[n._v("#")]),n._v(" 1.可选属性与只读属性")]),n._v(" "),e("ul",[e("li",[n._v("可选属性使用： ？")]),n._v(" "),e("li",[n._v("只读属性使用: readonly")]),n._v(" "),e("li",[n._v("readonly与const的区别: 做为变量使用的话用 const，若做为属性则使用readonly")])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('export default {}\n\n\n// 可选属性   使用?来进行修饰\ninterface IFullName {\n  firstName: string\n  lastName : string\n  age?: number\n}\n\nlet goddassName: IFullName = {\n  firstName: "邱",\n  lastName: "淑贞"\n}\n\nconsole.log(goddassName.firstName);\nconsole.log(goddassName.lastName);\n\n\n// 只读属性  readonly\ninterface IInfo {\n  readonly uname: string;\n  readonly uage: number;\n}\n\nlet beauty:IInfo = {\n  uname: "邱淑贞",\n  uage: 18\n}\n\n// beauty.uname = "赵丽颖";  // 报错\n\n/* \n  总结: readyonly 与 const 区别:\n    最简单判断该用readonly还是const的方法是看要把它做为变量使用还是做为一个属性。 \n    做为变量使用的话用 const，\n    若做为属性则使用readonly\n*/\n')])])]),e("h2",{attrs:{id:"_2-接口的继承"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-接口的继承"}},[n._v("#")]),n._v(" 2.接口的继承")]),n._v(" "),e("ul",[e("li",[n._v("接口可以通过其他接口来扩展自己。")]),n._v(" "),e("li",[n._v("Typescript 允许接口继承多个接口。")]),n._v(" "),e("li",[n._v("继承使用关键字 extends。")])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('// 单继承\ninterface IPerson { \n  age:number \n} \ninterface IName extends IPerson { \n  name:string \n} \n\nlet lady:IName = {\n  name: "邱淑贞",\n  age: 18\n}\n\n// 多继承\ninterface IFatherMoney {\n  m1: number\n}\ninterface IMotherMoney {\n  m2: number\n}\n\ninterface ISon extends IFatherMoney, IMotherMoney {\n  s: number\n} \n\nlet money:ISon = {\n  m1: 100,\n  m2: 100,\n  s: 100\n}\n\n\nconsole.log(`儿子一共有${money.m1 + money.m2 + money.s}万元`);\n')])])]),e("h2",{attrs:{id:"_3-接口的混合类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-接口的混合类型"}},[n._v("#")]),n._v(" 3.接口的混合类型")]),n._v(" "),e("ul",[e("li",[n._v("接口的混合类型就是调用接口的时候，同时包含多种不同的类型")]),n._v(" "),e("li",[n._v("应用场景: 闭包")])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("export default {}\n\n// 在接口中有多种类型进行混合\ninterface Counter {\n  (start: number): string;\n  interval: number;\n  reset(): void;\n}\n\nfunction getCounter(): Counter {\n  let counter = <Counter>function (start: number) { };\n  counter.interval = 123;\n  counter.reset = function() { };\n\n  return counter;\n}\n\nlet c = getCounter();\nc(10);\nc.reset();\nc.interval = 5.0;\n")])])]),e("h2",{attrs:{id:"_4-接口与类型别名的异同"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-接口与类型别名的异同"}},[n._v("#")]),n._v(" 4.接口与类型别名的异同")]),n._v(" "),e("p",[n._v("1.相同点:")]),n._v(" "),e("ul",[e("li",[n._v("都可以描述属性或方法")]),n._v(" "),e("li",[n._v("都允许拓展")])]),n._v(" "),e("p",[n._v("2.不同点:")]),n._v(" "),e("ul",[e("li",[n._v("type可以声明基本数据类型，联合类型，数组等; interface只能声明变量")]),n._v(" "),e("li",[n._v("当出现使用type和interface声明同名的数据时;type会直接报错;interface会进行组合")]),n._v(" "),e("li",[n._v("type不会自动合并；interface会")])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('export default {}\n\n// 相同点:\n// 1.都可以描述属性或方法\ntype womenStar = {\n  name: string\n  age: number\n  perform(): any\n}\ninterface IWStar {\n  name: string\n  age: number\n  perform(): any\n}\n\nlet star1 = {\n  name: "邱淑贞",\n  age: 18,\n  perform() {\n    return "倚天屠龙记"\n  }\n}\nlet star2 = {\n  name: "李一桐",\n  age: 18,\n  perform() {\n    return "射雕英雄传"\n  }\n}\n\n// 2.都允许拓展\ntype money  = {\n  y1: number\n}\ntype money2 = money & {\n  y2: number\n}\n\nlet salary:money2 = {\n  y1: 10,\n  y2: 20\n}\n\ninterface Istar1 {\n  name: string\n}\ninterface Istar2 extends Istar1 {\n  age: number\n}\n\nlet starInfo:Istar2 = {\n  name: "邱淑贞",\n  age: 18\n}\n\n\n// 不同点：\n// 1.type可以声明基本数据类型，联合类型，数组等\n//   interface只能声明变量\ntype age = number;\ntype info = string | number | boolean;\ntype beautyList = [string | number];\n// interface Iage = number; // 报错\n\n\n// 2.当出现使用type和interface声明同名的数据时\n//   type会直接报错\n//   interface会进行组合\n// type mygoddassName = {\n//   name: string\n// }\n\n// type mygoddassName = {\n//   name: number\n// }\n\ninterface mygoddassName {\n  name: string\n} \ninterface mygoddassName {\n  name: string\n  age: number\n} \n\nlet goddass:mygoddassName = {\n  name: "赵丽颖",\n  age: 20\n}\n\n')])])])])}),[],!1,null,null,null);e.default=r.exports}}]);